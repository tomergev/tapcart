{"version":3,"sources":["components/global/card/CardPresentation.js","components/global/card/index.js","components/global/graph/GraphPresentation.js","utils/generateRandomNumber.js","hooks/useInterval.js","components/global/graph/index.js","components/global/graph/GraphIntervalContainer.js","components/app/index.js","components/app/AppPresentation.js","serviceWorker.js","index.js","components/app/App.module.css","components/global/card/Card.module.css"],"names":["Card","props","children","className","styles","card","Graph","data","width","height","min","max","Math","floor","random","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","generateRandomNumber","clearInterval","initialData","generateNewData","useState","setData","GraphPresentation","App","cardsContainer","key","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"0LAaeA,ICVAA,EDAf,SAAcC,GAAQ,IACbC,EAAaD,EAAbC,SAER,OACC,yBAAKC,UAAWC,IAAOC,MACrBH,I,sBEaWI,MAlBf,SAAeL,GAAQ,IAErBM,EAGGN,EAHHM,KACAC,EAEGP,EAFHO,MACAC,EACGR,EADHQ,OAGD,OACC,kBAAC,cACI,CACHF,OACAC,QACAC,YCfW,aAA8B,IAApBC,EAAmB,uDAAb,EAAGC,EAAU,uDAAJ,GACvC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,GCwBvCK,MArBf,SAAqBC,GAA6C,IAAnCC,EAAkC,uDAA1B,CAAEP,IAAK,IAAMC,IAAK,KAClDO,EAAgBC,mBAGtBC,qBAAU,WACTF,EAAcG,QAAUL,IACtB,CAACA,IAGJI,qBAAU,WAKT,GAAc,OAAVH,EAAgB,CACnB,IAAIK,EAAKC,aALV,WACCL,EAAcG,YAIaG,EAAqBP,EAAMP,IAAKO,EAAMN,MACjE,OAAO,kBAAMc,cAAcH,OAE1B,CAACL,KCnBUX,ECCgB,SAACL,GAAW,IAEzCO,EAIGP,EAJHO,MACAC,EAGGR,EAHHQ,OACAiB,EAEGzB,EAFHyB,YACAC,EACG1B,EADH0B,gBALwC,EAQjBC,mBAASF,GAAe,IARP,mBAQlCnB,EARkC,KAQ5BsB,EAR4B,KAiBzC,OAPAd,GAAY,WACXc,EAAQ,GAAD,mBACHtB,GADG,CAENoB,EAAgBpB,QAEf,CAACG,IAAK,IAAMC,IAAK,MAGnB,kBAACmB,EACI,CACHvB,OACAC,QACAC,YCvBWsB,ECIH,WAcX,OACC,yBAAK5B,UAAWC,IAAO4B,gBACtB,kBAAC,EAAD,KACC,kBAAC,EACI,CACHxB,MAlBS,IAmBTC,OAlBU,IAmBViB,YAlBe,CACnB,CAAEO,IAAK,EAAG1B,KAAM,GAChB,CAAE0B,IAAK,EAAG1B,KAAM,GAChB,CAAE0B,IAAK,EAAG1B,KAAM,KAgBZoB,gBAbmB,SAACpB,GAAD,MAAW,CAClC0B,IAAK1B,EAAK2B,OACV3B,KAAMiB,WCNYW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBElInBC,EAAOC,QAAU,CAAC,eAAiB,8B,mBCAnCD,EAAOC,QAAU,CAAC,KAAO,qB","file":"static/js/main.f0ba751b.chunk.js","sourcesContent":["import React from 'react'\r\nimport styles from './Card.module.css'\r\n\r\nfunction Card(props) {\r\n\tconst { children } = props\r\n\r\n\treturn (\r\n\t\t<div className={styles.card}>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './CardPresentation'\r\n\r\nexport default Card ","import React from 'react'\r\nimport { ScatterPlot } from 'reaviz'\r\n\r\nfunction Graph(props) {\r\n\tconst {\r\n\t\tdata,\r\n\t\twidth,\r\n\t\theight,\r\n\t} = props\r\n\r\n\treturn (\r\n\t\t<ScatterPlot\r\n\t\t\t{...{\r\n\t\t\t\tdata,\r\n\t\t\t\twidth,\r\n\t\t\t\theight,\r\n\t\t\t}}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nexport default Graph","export default function (min = 0, max = 10) {\r\n\treturn Math.floor(Math.random() * (max - min + 1)) + min\r\n}","// Source (Dan Abramov): https://overreacted.io/making-setinterval-declarative-with-react-hooks/ \r\nimport React, { useEffect, useRef } from 'react'\r\nimport generateRandomNumber from '../utils/generateRandomNumber'\r\n\r\nfunction useInterval(callback, delay = { min: 1000, max: 5000 }) {\r\n\tconst savedCallback = useRef()\r\n\r\n\t// Remember the latest callback.\r\n\tuseEffect(() => {\r\n\t\tsavedCallback.current = callback\r\n\t}, [callback])\r\n\r\n\t// Set up the interval.\r\n\tuseEffect(() => {\r\n\t\tfunction tick() {\r\n\t\t\tsavedCallback.current()\r\n\t\t}\r\n\t\t\r\n\t\tif (delay !== null) {\r\n\t\t\tlet id = setInterval(tick, generateRandomNumber(delay.min, delay.max))\r\n\t\t\treturn () => clearInterval(id)\r\n\t\t}\r\n\t}, [delay])\r\n}\r\n\r\nexport default useInterval","import React from 'react'\r\nimport Graph from './GraphIntervalContainer'\r\n\r\nexport default Graph","import React, { useState } from 'react'\r\nimport GraphPresentation from './GraphPresentation'\r\nimport useInterval from '../../../hooks/useInterval'\r\n\r\nconst GraphIntervalContainer = (props) => {\r\n\tconst {\r\n\t\twidth,\r\n\t\theight,\r\n\t\tinitialData,\r\n\t\tgenerateNewData,\r\n\t} = props\r\n\r\n\tconst [data, setData] = useState(initialData || [])\r\n\r\n\tuseInterval(() => {\r\n\t\tsetData([\r\n\t\t\t...data,\r\n\t\t\tgenerateNewData(data)\r\n\t\t])\r\n\t}, {min: 1000, max: 5000}) // Setting the delay of the interval to be a minimum of 1000ms and a maximum of 5000ms\r\n\r\n\treturn (\r\n\t\t<GraphPresentation\r\n\t\t\t{...{\r\n\t\t\t\tdata,\r\n\t\t\t\twidth,\r\n\t\t\t\theight,\r\n\t\t\t}}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nexport default GraphIntervalContainer","import React from 'react'\r\nimport App from './AppPresentation.js'\r\n\r\nexport default App ","\r\nimport React from 'react'\r\nimport styles from './App.module.css'\r\nimport Card from '../global/card'\r\nimport Graph from '../global/graph'\r\nimport generateRandomNumber from '../../utils/generateRandomNumber'\r\n\r\nconst App = () => {\r\n\tconst width = 700\r\n\tconst height = 300\r\n\tconst initialData = [\r\n\t\t{ key: 0, data: 0 },\r\n\t\t{ key: 1, data: 5 },\r\n\t\t{ key: 2, data: 10 },\r\n\t]\r\n\r\n\tconst generateNewData = (data) => ({\r\n\t\tkey: data.length,\r\n\t\tdata: generateRandomNumber() // Defaults to generating a random number between 1 & 10\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div className={styles.cardsContainer}>\r\n\t\t\t<Card>\r\n\t\t\t\t<Graph\r\n\t\t\t\t\t{...{\r\n\t\t\t\t\t\twidth,\r\n\t\t\t\t\t\theight,\r\n\t\t\t\t\t\tinitialData,\r\n\t\t\t\t\t\tgenerateNewData,\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</Card>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/app'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsContainer\":\"App_cardsContainer__24BJl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__2efQn\"};"],"sourceRoot":""}